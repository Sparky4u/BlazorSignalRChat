@page "/chat"
@inject NavigationManager NavigationManager
@inject TextAnalyticsService TextAnalyticsService
@rendermode InteractiveWebAssembly

<h3>Chat</h3>

@if (IsConnected)
{
    <input type="text" @bind="userInput" placeholder="Enter your name" />
    <input type="text" @bind="messageInput" placeholder="Enter your message" />
    <button @onclick="Send">Send</button>

    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li class="@message.SentimentClass">@message.Text</li>  
        }
    </ul>
}
else
{
    <span>Connecting...</span>
}

<style>
    .positive {
        color: green;
    }

    .negative {
        color: red;
    }

    .neutral {
        color: gray;
    }
</style>

@code {
    private HubConnection hubConnection;
    private List<ChatMessage> messages = new List<ChatMessage>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", async (user, message) =>
        {
            var sentiment = await TextAnalyticsService.AnalyzeSentimentAsync(message);
            var sentimentClass = sentiment.ToLower() switch
            {
                "positive" => "positive",
                "negative" => "negative",
                _ => "neutral"
            };
            var encodedMsg = new ChatMessage
                {
                    Text = $"{user}: {message} (Sentiment: {sentiment})",
                    SentimentClass = sentimentClass                    
                };
            messages.Add(encodedMsg);           
            
            StateHasChanged();
        });
       
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        messageInput = string.Empty;
        StateHasChanged();
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;   
}